{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ;AACjE,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG;;;;;;;;;;AAUnD,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAChC,KAAK,CAAC;IACJ,QAAQ;IACR,cAAc;IACd,OAAO;IACP,QAAQ;IACR,OAAO;IACP,OAAO;IACP,WAAW;EACb,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;IACd,QAAQ,CAAC,CAAC,UAAU;IACpB,cAAc,CAAC,CAAC,gBAAgB;IAChC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAC1B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAC1B,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAC5B,CAAC;EACD,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IACT,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ;IAC3C,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW;EAC/B;EACA,KAAK,CAAC;IACJ,WAAW,CAAC,CAAC,iBAAiB,CAAC,CAAC,UAAU,CAAC,CAAC,WAAW;IACvD,UAAU,CAAC,CAAC,UAAU,CAAC,CAAC,cAAc;EACxC,CAAC,CAAC,CAAC,CAAC;IACF,CAAC,GAAG,CAAC,WAAW;EAClB,KAAK,CAAC;IACJ,aAAa,CAAC,CAAC,mBAAmB,CAAC,CAAC,YAAY,CAAC,CAAC,aAAa;IAC/D,YAAY,CAAC,CAAC,YAAY,CAAC,CAAC,gBAAgB;EAC9C,CAAC,CAAC,CAAC,CAAC;IACF,CAAC,GAAG,CAAC,aAAa;;EAEpB,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IACf,UAAU;IACV,WAAW;IACX,iBAAiB;IACjB,UAAU;IACV,cAAc;IACd,UAAU;IACV,WAAW;IACX,CAAC,CAAC,CAAC,KAAK;IACR,aAAa;IACb,YAAY;IACZ,gBAAgB;IAChB,YAAY;IACZ,mBAAmB;IACnB,aAAa;IACb,YAAY;EACd;EACA,MAAM,CAAC;IACL,KAAK,CAAC,CAAC,QAAQ;IACf,OAAO,CAAC,CAAC;MACP,QAAQ;MACR,OAAO;MACP,QAAQ;MACR,cAAc;IAChB,CAAC;EACH;AACF;;AAEA,MAAM,CAAC,OAAO,CAAC","file":"index.js","sourcesContent":["import { makeMarkers, makeCutRule, makePasteRule } from 'restream'\nimport { commentsRe, inlineCommentsRe } from './lib'\n\n/**\n * @typedef {import('restream').Rule} Rule\n */\n\n/**\n * Create a new set of rules, where service markers are used to exclude comments and strings from processing.\n * @param {Rule[]} [rules] A set of rules to surround with markers. Typically, this will be done by `alamode`.\n */\nconst makeRules = (rules = []) => {\n  const {\n    comments,\n    inlineComments,\n    strings,\n    literals,\n    escapes,\n    regexes,\n    regexGroups,\n  } = makeMarkers({\n    comments: commentsRe,\n    inlineComments: inlineCommentsRe,\n    strings: /([\"'])(.*?)\\1/gm,\n    literals: /`([\\s\\S]*?)`/gm,\n    escapes: /\\\\[\\\\`'\"/]/g,\n    regexes: /\\/(.+?)\\//gm,\n    regexGroups: /\\[(.*?)\\]/gm,\n  })\n  const mr = [\n    comments, inlineComments, strings, literals,\n    escapes, regexes, regexGroups,\n  ]\n  const [\n    cutComments, cutInlineComments, cutStrings, cutLiterals,\n    cutEscapes, cutRegexes, cutRegexGroups,\n  ] = mr\n    .map(makeCutRule)\n  const [\n    pasteComments, pasteInlineComments, pasteStrings, pasteLiterals,\n    pasteEscapes, pasteRegexes, pasteRegexGroups,\n  ] = mr\n    .map(makePasteRule)\n\n  const allRules = [\n    cutEscapes,\n    cutComments,\n    cutInlineComments,\n    cutStrings,\n    cutRegexGroups,\n    cutRegexes,\n    cutLiterals,\n    ...rules,\n    pasteLiterals,\n    pasteRegexes,\n    pasteRegexGroups,\n    pasteStrings,\n    pasteInlineComments,\n    pasteComments,\n    pasteEscapes,\n  ]\n  return {\n    rules: allRules,\n    markers: {\n      literals,\n      strings,\n      comments,\n      inlineComments,\n    },\n  }\n}\n\nexport default makeRules"]}