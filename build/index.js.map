{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ;AACjE,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG;;;;;;;;;;AAUnD,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAChC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;IAClE,QAAQ,CAAC,CAAC,UAAU;IACpB,cAAc,CAAC,CAAC,gBAAgB;IAChC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAC1B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAC1B,CAAC;EACD,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ;EACvD,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC,iBAAiB,CAAC,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAChE,CAAC,GAAG,CAAC,WAAW;EAClB,KAAK,CAAC,CAAC,aAAa,CAAC,CAAC,mBAAmB,CAAC,CAAC,YAAY,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC,GAAG,CAAC,aAAa;;EAEpB,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IACf,WAAW;IACX,iBAAiB;IACjB,WAAW;IACX,UAAU;IACV,CAAC,CAAC,CAAC,KAAK;IACR,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,aAAa;EACf;EACA,MAAM,CAAC;IACL,KAAK,CAAC,CAAC,QAAQ;IACf,OAAO,CAAC,CAAC;MACP,QAAQ;MACR,OAAO;MACP,QAAQ;MACR,cAAc;IAChB,CAAC;EACH;AACF;;AAEA,MAAM,CAAC,OAAO,CAAC","file":"index.js","sourcesContent":["import { makeMarkers, makeCutRule, makePasteRule } from 'restream'\nimport { commentsRe, inlineCommentsRe } from './lib'\n\n/**\n * @typedef {import('restream').Rule} Rule\n */\n\n/**\n * Create a new set of rules, where service markers are used to exclude comments and strings from processing.\n * @param {Rule[]} [rules] A set of rules to surround with markers. Typically, this will be done by `alamode`.\n */\nconst makeRules = (rules = []) => {\n  const { comments, inlineComments, strings, literals } = makeMarkers({\n    comments: commentsRe,\n    inlineComments: inlineCommentsRe,\n    strings: /([\"'])(.*?)\\1/gm,\n    literals: /`[\\s\\S]+?`/gm,\n  })\n  const mr = [comments, inlineComments, strings, literals]\n  const [cutComments, cutInlineComments, cutStrings, cutLiterals] = mr\n    .map(makeCutRule)\n  const [pasteComments, pasteInlineComments, pasteStrings, pasteLiterals] = mr\n    .map(makePasteRule)\n\n  const allRules = [\n    cutComments,\n    cutInlineComments,\n    cutLiterals,\n    cutStrings,\n    ...rules,\n    pasteStrings,\n    pasteLiterals,\n    pasteInlineComments,\n    pasteComments,\n  ]\n  return {\n    rules: allRules,\n    markers: {\n      literals,\n      strings,\n      comments,\n      inlineComments,\n    },\n  }\n}\n\nexport default makeRules"]}